service: dynamodb-lambda

provider:
  name: aws
  region: ap-northeast-1
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  deploymentMethod: direct

plugins:
  - serverless-iam-roles-per-function
  - serverless-plugin-scripts
  - serverless-s3-sync
  - serverless-prune-plugin
  # dev
  - serverless-dynamodb
  - serverless-offline

custom:
  alertsEmail: niewczas.jakub@gmail.com
  prefix: ${self:service}-${self:provider.stage}-
  dynamodbTableName: ${self:custom.prefix}-posts-table
  frontendBucketName: ${self:custom.prefix}-frontend
  scripts:
    hooks:
      "aws:deploy:deploy:updateStack": "LAMBDA_ENDPOINT=$(yarn run serverless info --stage ${self:provider.stage} --verbose | grep 'ANY' | head -n1 | rev | cut -d ' ' -f1 | rev) yarn run build:frontend"
  s3Sync:
    - bucketName: ${self:custom.frontendBucketName}
      localDir: ./.build/frontend/
      deleteRemoved: true
  prune:
    automatic: true
    number: 0

  serverless-offline:
    reloadHandler: true
    httpPort: 3001

  serverless-dynamodb:
    start:
      noStart: true

resources:
  Resources:
    MainTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamodbTableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    FrontendBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.frontendBucketName}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
        OwnershipControls:
          Rules:
            - ObjectOwnership: ObjectWriter
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html

    FrontendBucketAccessPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: FrontendBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: '*'
              Action:
                - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.frontendBucketName}/*

    ErrorsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.prefix}-errors

    ErrorsTopicSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${self:custom.alertsEmail}
        Protocol: email
        TopicArn: !Ref ErrorsTopic

    ErrorsAlarmAppFunction:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmDescription: "Alarms for ${self:custom.prefix}-app"
        Namespace: AWS/Lambda
        MetricName: Errors
        Statistic: Sum
        Threshold: 1
        ComparisonOperator: GreaterThanOrEqualToThreshold
        EvaluationPeriods: 1
        Period: 300 # 5min
        Dimensions:
        - Name: FunctionName
          Value: ${self:custom.prefix}-app
        AlarmActions:
          - !Ref ErrorsTopic

    ErrorsAlarmDbBackupFunction:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmDescription: "Alarms for ${self:custom.prefix}-db-backup"
        Namespace: AWS/Lambda
        MetricName: Errors
        Statistic: Sum
        Threshold: 1
        ComparisonOperator: GreaterThanOrEqualToThreshold
        EvaluationPeriods: 1
        Period: 300 # 5min
        Dimensions:
        - Name: FunctionName
          Value: ${self:custom.prefix}-db-backup
        AlarmActions:
          - !Ref ErrorsTopic

  Outputs:
    FrontendUrl:
      Value: "http://${self:custom.frontendBucketName}.s3-website-${self:provider.region}.amazonaws.com"

functions:
  app:
    handler: ./src/backend/entry-point-app.handler
    name: ${self:custom.prefix}-app
    memorySize: 128 # mb
    timeout: 5 # seconds
    environment:
      DYNAMODB_TABLE_NAME: ${self:custom.dynamodbTableName}
    events:
      - http:
          path: /
          method: any
      - http:
          path: /{proxy+}
          method: any
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
          - "dynamodb:GetItem"
          - "dynamodb:Scan"
        Resource: !GetAtt MainTable.Arn

  dbBackup:
    handler: ./src/backend/entry-point-db-backup.handler
    name: ${self:custom.prefix}-db-backup
    memorySize: 128 # mb
    timeout: 5 # seconds
    environment:
      DYNAMODB_TABLE_NAME: ${self:custom.dynamodbTableName}
    events:
      - schedule: rate(1 day)
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:CreateBackup"
        Resource: !GetAtt MainTable.Arn
