service: dynamodb-lambda

provider:
  name: aws
  region: ap-northeast-1
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  deploymentMethod: direct
  environment:
    DYNAMODB_TABLE_NAME: ${self:custom.dynamodbTableName}

custom:
  prefix: ${self:service}-${self:provider.stage}-
  dynamodbTableName: ${self:custom.prefix}-posts-table
  prune:
    automatic: true
    number: 0
  serverless-offline:
    reloadHandler: true
  serverless-dynamodb:
    stages:
      - dev
    start:
      port: 8000
      docker: true
      sharedDb: true
      inMemory: true
      delayTransientStatuses: true
      migrate: true

plugins:
  - serverless-iam-roles-per-function
  - serverless-prune-plugin
  - serverless-dynamodb
  - serverless-offline

resources:
  Resources:
    MainTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamodbTableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

functions:
  app:
    handler: lambda-entry-point.handler
    name: ${self:custom.prefix}-app
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: /
          method: any
      - http:
          path: /{proxy+}
          method: any
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
          - "dynamodb:GetItem"
        Resource: !GetAtt MainTable.Arn
